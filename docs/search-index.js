var searchIndex = JSON.parse('{\
"rust_asar":{"doc":"","t":"AAADLLLLMLLLLLLLLMMLLLLENNNNLLLLLLLLLLLLLLENNNLLLLLLLLLLLLLLLL","n":["asar","asar_error","content","Asar","borrow","borrow_mut","clone","clone_into","content","extract","fmt","from","get_file","get_paths_contain","into","list","open","src_path","start","to_owned","try_from","try_into","type_id","Error","IoError","ParseHeaderError","SerdeJsonError","UnknownContentType","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","provide","to_string","try_from","try_into","type_id","Content","File","Folder","Home","borrow","borrow_mut","clone","clone_into","eq","find","fmt","from","into","new","paths_to_vec","to_owned","try_from","try_into","type_id","write_to_dir"],"q":[[0,"rust_asar"],[3,"rust_asar::asar"],[23,"rust_asar::asar_error"],[42,"rust_asar::content"]],"d":["","","","Asar represents the structure of an Asar archive file, …","","","","","","Writes content of instantiated Asar struct at the …","","Returns the argument unchanged.","Takes one argument of type Path and provides the file as a …","Takes in one argument of type <code>&amp;str</code>, returning a vector of …","Calls <code>U::from(self)</code>.","Returns a vector of all Paths within an archive as …","Opens either an Asar archive file or a directory.","","","","","","","Standard Error enum, containing all necessary custom and …","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Content enum keeps track of an asar file’s internal …","","","","","","","","","Searches for a file by its full path name provided by the …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Instantiates a Content enum given the one argument …","Returns a vector of PathBufs representing all files and …","","","","","Writes the files and folders of current Content enum to …"],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19],"f":[0,0,0,0,[[]],[[]],[1,1],[[]],0,[[1,[3,[2]]],[[5,[4]]]],[[1,6],7],[[]],[[1,[3,[2]]],[[10,[[9,[8]]]]]],[[1,11],[[9,[12]]]],[[]],[1,[[5,[[9,[13]],4]]]],[[[3,[2]]],[[5,[1,4]]]],0,0,[[]],[[],5],[[],5],[[],14],0,0,0,0,0,[[]],[[]],[[4,6],7],[[4,6],7],[15,4],[16,4],[17,4],[[]],[[]],[18],[[],13],[[],5],[[],5],[[],14],0,0,0,0,[[]],[[]],[19,19],[[]],[[19,19],20],[[19,[3,[2]]],[[10,[19]]]],[[19,6],7],[[]],[[]],[21,[[5,[19,4]]]],[19,[[5,[[9,[12]],4]]]],[[]],[[],5],[[],5],[[],14],[[19,[3,[2]],22,23],[[5,[4]]]]],"c":[],"p":[[3,"Asar"],[3,"Path"],[8,"AsRef"],[4,"Error"],[4,"Result"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Vec"],[4,"Option"],[15,"str"],[3,"PathBuf"],[3,"String"],[3,"TypeId"],[3,"Error"],[3,"Error"],[3,"ParseIntError"],[3,"Demand"],[4,"Content"],[15,"bool"],[4,"Value"],[3,"File"],[15,"u64"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
